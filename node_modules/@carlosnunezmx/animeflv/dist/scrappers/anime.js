"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetEpisodes = exports.GetAnimeInfo = void 0;
const config_js_1 = __importDefault(require("../config.js"));
const errors_js_1 = require("../errors.js");
const fetch_js_1 = require("./fetch.js");
async function GetAnimeInfo(Query) {
    if (!Query)
        throw new errors_js_1.ValidationError("Se requiere una Query para obtener el Anime", { Query: true });
    const $ = await (0, fetch_js_1.fetchResource)({ resource: config_js_1.default.baseURL + config_js_1.default.anime + Query });
    // Ficha
    const $Ficha = $.querySelector('.Ficha');
    if (!$Ficha)
        throw new errors_js_1.HTML_PARSING_ERROR(".Ficha", "anime.ts", "GetAnimeInfo", "$Ficha");
    // Getting Title
    const Title = $Ficha.querySelector(".Title")?.innerText ?? "";
    // Getting another names from AnimeFLV
    const AlternativeNames = [];
    const $Names = $Ficha.querySelectorAll("span.TxtAlt");
    if ($Names.length > 0)
        $Names.forEach((el) => AlternativeNames.push(el.innerText));
    let Type = $Ficha.querySelector(".Type")?.innerText ?? "";
    // Reviews from AnimeFLV
    let Reviews = {
        Review: 0,
        Number: 0
    };
    let Review = $.getElementById("votes_prmd")
        .innerText ?? '0';
    Reviews.Review = Number(Review);
    let RNumber = $Ficha.getElementById("votes_nmbr")
        .innerText ?? "0";
    Reviews.Number = Number(RNumber);
    const $Body = $.querySelector(".Container aside");
    if (!$Body)
        throw new errors_js_1.HTML_PARSING_ERROR(".Body", "anime.ts", "GetAnimeInfo", "$Body");
    const Image = config_js_1.default.baseURL + $Body.querySelector(".Image img")?.getAttribute('src') ?? "";
    const OnGoing = ($Body.querySelector(".AnmStts span")?.innerText ?? '') === "En emision";
    let SFollowers = $Body.querySelector(".WdgtCn .Title span")?.innerText ?? "0";
    let Followers = Number(SFollowers);
    // Generos y descripcion
    const $Main = $.querySelector(".Main");
    if (!$Main)
        throw new errors_js_1.HTML_PARSING_ERROR(".Main", "anime.ts", "GetAnimeInfo", "$Main");
    const $Tags = $Main.querySelectorAll(".Nvgnrs a");
    const alternativeTitles = AlternativeTitles($);
    const Genders = [];
    if ($Tags.length > 0)
        $Tags.forEach(tag => Genders.push(tag.innerText));
    const Description = $Main.querySelector(".Description p")?.innerHTML ?? "";
    const Episodes = await GetEpisodes({ $ });
    return { Title, AlternativeNames, Reviews, Type, Image, OnGoing, Followers, Genders, Description, Episodes, AlternativeTitles: alternativeTitles, Id: Query };
}
exports.GetAnimeInfo = GetAnimeInfo;
function AlternativeTitles($) {
    const $container = $.querySelectorAll('main.Main ul.ListAnmRel li');
    if ($container.length == 0) {
        return [];
    }
    return $container.map($li => {
        const $link = $li.querySelector('a');
        if (!$link)
            throw new errors_js_1.HTML_PARSING_ERROR('ul.ListAnmRel li a', 'anime.ts', 'AlternativeNames', '$link');
        const Id = $link.getAttribute('href') ?? "";
        const Name = $link.innerText ?? "";
        const Type = $li.innerText ?? "";
        return {
            Id,
            Name,
            Type
        };
    });
}
async function GetEpisodes({ $, anime_id }) {
    if (!$ && !anime_id)
        throw new errors_js_1.ValidationError("Se requiere un elemento de paeticiÃ³n o un anime para buscar sus episodios", { $, anime_id });
    if (!$ && anime_id)
        $ = await (0, fetch_js_1.fetchResource)({
            resource: config_js_1.default.baseURL + config_js_1.default.anime + anime_id
        });
    const scripts = $?.querySelectorAll("script:not([src])");
    let FScript = "";
    scripts?.forEach(script => {
        const Text = script.innerHTML;
        if (!Text.includes("episodes") || !Text)
            return;
        FScript = Text;
    });
    if (!FScript.length)
        throw new errors_js_1.HTML_PARSING_ERROR('Source Script', 'anime.ts', 'GetEpisodes', 'FScript');
    // @ts-ignore
    let var_lines = FScript.split("\n")
        .filter((line) => line.includes("var"))
        .slice(0, 2)
        .map((l) => l
        .split("=")[1]
        .replace(";", "")).map(l => JSON.parse(l));
    const Eps = OrderArray(var_lines);
    // Ahora sacaremos que la informacion del anime para
    // Construir urls
    return Eps.episodes.map(e => {
        const Image = config_js_1.default.cdn.screenshot + Eps.meta.id + "/" + e.episodeNumber + "/th_3.jpg" ?? "";
        const Id = `${Eps.meta.url}-${e.episodeNumber}` ?? "";
        return { Image, Number: e.episodeNumber, Id };
    });
}
exports.GetEpisodes = GetEpisodes;
function OrderArray([AnimeInfo, episodeArr]) {
    const episodes = episodeArr.map((e) => ({
        // @ts-ignore
        episodeNumber: e[0],
        // @ts-ignore
        episodeId: e[1]
    }));
    return {
        meta: {
            id: AnimeInfo[0],
            name: AnimeInfo[1],
            url: AnimeInfo[2]
        },
        episodes
    };
}
